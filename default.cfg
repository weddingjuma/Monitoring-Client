<!--
  Default configuration file for Monitoring-Client systems
  written by Seth Walsh (seth.walsh@utah.edu)
-->

<!-- File section
    This section contains the different paths and files that the Client needs.  Read,Write,Execute is needed by the Client to these paths.
-->
<path>
  <!-- Program list containing programs being monitored on this computer.  The Server
    will send the Client an updated list as it updates in the database, but an initial file is required by the Client
  -->
  <plist>/opt/monitoring/config/masterlist.txt</plist>
  
  <!-- Config file (this file) -->
  <config>/opt/monitoring/config/default.cfg</config>
  
  <!-- Events file stores Events when the Client is unable to send data to the Server.  When the Client sends data it will read from this file, send what it finds there, and then clear the file.
  -->
  <data>/opt/monitoring/data/events.txt</data>
  
  <!-- Log file contains any logging done by the Client -->
  <log>/var/log/monitoring-client.log</log>
</path>

<!-- Network settings
    Settings dealing with Server communication go here
-->
<network>
  <!-- Server address -->
  <server>155.97.17.169</server>
  
  <!-- Port that data will be sent to the Server on -->
  <send_port>16100</send_port>
  
  <!-- Port that the client will listen for incoming Server communications on -->
  <listen_port>16200</listen_port>
</network>

<!-- Messages section
    Here you can assign given messages to display for restricted accounts that are not allowed to log into a given machine, or for accounts that are time restricted.
    
    For time restricted accounts the time that the user will be logged off will be displayed at the end of the <expire> message below.
-->
<messages>
  <!-- Blocked accounts is a REGEX like (or full name) string representing accounts to deny access to this machine 
      Example 1 - gp (gp002340)
      Example 2 - gp,gx (gp02342,gx0239842)
      Example 3 - gp,gx,root (gp23422,gx02342,root)
  -->
  <blocked>gp,root</blocked>
  
  <!-- Times (in minutes) from expiration to display <expire> message
      
      Example 1 - 15,5,1 (displays the <expire> message at 15, 5, and 1 minute from expiration time)
      
      Default - 15,5,1
  -->
  <display_times>15,5,1</display_times>
  
  <!-- Message displayed when a restricted account attempts to log in to a machine they are not allowed on
  -->
  <restricted>Your user account is not allowed access on this machine</restricted>
  
  <!-- Message displayed when an account is near expiration -->
  <expire>Your account will expire soon so please save your work.  You will be logged out at </expire>
  
  <!-- Message displayed when an account has expired -->
  <expired>Your account has expired!  You will be logged out now</expired>
</messages>

<!-- Settings section - Place any settings specific to the way in which the monitoring
    client will be run.
-->
<settings>
  <!-- size of event data block.  In this case 32 representing 32 bit integer -->
  <size>32</size>
  
  <!-- frequency is the rate at which the monitoring client gathers data.  It is a multiple of 60 (seconds)
  -->
  <frequency>1</frequency>
  
  <!-- call_home is the time (in minutes) at which if a client has not been communicated with by the Server it will attempt to call home
  -->
  <call_home>10</call_home>
</settings>

<!--
  Scripts section - Place any scripts that you want the monitoring client to run here.
-->
<scripts>
  <script>  
    <!-- Command and Path to the script you want run -->
    <command>perl C:\Tools\test.pl</command>
    <!-- Time(s) you want the script run.  Each line corresponds to a <path> above.  Where
      the day is in 7 day of the week starting with Monday, and 0 means Every day.  Hours are in 24 hour format.  If you want a script run every day at a specific time except once a week you want it to run at a different time then follow example 3.  Times can be seperated by comma's to run the script at different times for different days of the week.  If you don't have an entry with day 0, then the script will only run on the days you specify.
	  Format:
	  Day:Hour:Minute,Day:Hour:Minute
	  Example 1 - 1:2:30 (Monday, 2:30 AM)
	  Example 2 - 0:16:00 (Every day, 4:00 PM)
	  Example 3 - 0:2:00,3:3:00 (Every day @ 2:00 AM except Wed @ 3:00 AM)
	  Example 4 - 1:2:00,3:0:30 (Monday @ 2:00 AM, Wed @ 12:30 AM)
  -->
    <time>0:2:00</time>
  </script>
  <script>
    <command>perl C:\Tools\test2.pl</command>    
  </script>  
</scripts>